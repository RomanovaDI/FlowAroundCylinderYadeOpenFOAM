FoamFile
{
	version     2.0;
	format      ascii;
	class       dictionary;
	object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

//meshGenApp blockMesh;
convertToMeters 1;

//vertices #codeStream
//{
//	codeInclude
//	#{
//		#include "pointField.H"
//	#};
//
//	code
//	#{
//		pointField points(32);
//		points[0]  = point( 0.05,       0.,        -0.2);
//		points[1]  = point( 0.1,        0.,        -0.2);
//		points[2]  = point( 0.2,        0.,        -0.2);
//		points[3]  = point( 0.2,        0.0707107, -0.2);
//		points[4]  = point( 0.0707107,  0.0707107, -0.2);
//		points[5]  = point( 0.0353553,  0.0353553, -0.2);
//		points[6]  = point( 0.2,        0.2,       -0.2);
//		points[7]  = point( 0.0707107,  0.2,       -0.2);
//		points[8]  = point( 0.,         0.2,       -0.2);
//		points[9]  = point( 0.,         0.1,       -0.2);
//		points[10] = point( 0.,         0.05,      -0.2);
//		points[11] = point(-0.05,       0.,        -0.2);
//		points[12] = point(-0.1,        0.,        -0.2);
//		points[13] = point(-0.2,        0.,        -0.2);
//		points[14] = point(-0.2,        0.0707107, -0.2);
//		points[15] = point(-0.0707107,  0.0707107, -0.2);
//		points[16] = point(-0.0353553,  0.0353553, -0.2);
//		points[17] = point(-0.2,        0.2,       -0.2);
//		points[18] = point(-0.0707107,  0.2,       -0.2);
//		points[19] = point( 0.2,       -0.0707107, -0.2);
//		points[20] = point( 0.0707107, -0.0707107, -0.2);
//		points[21] = point( 0.0353553, -0.0353553, -0.2);
//		points[22] = point( 0.2,       -0.2,       -0.2);
//		points[23] = point( 0.0707107, -0.2,       -0.2);
//		points[24] = point( 0.,        -0.2,       -0.2);
//		points[25] = point( 0.,        -0.1,       -0.2);
//		points[26] = point( 0.,        -0.05,      -0.2);
//		points[27] = point(-0.2,       -0.0707107, -0.2);
//		points[28] = point(-0.0707107, -0.0707107, -0.2);
//		points[29] = point(-0.0353553, -0.0353553, -0.2);
//		points[30] = point(-0.2,       -0.2,       -0.2);
//		points[31] = point(-0.0707107, -0.2,       -0.2);
//
//		// Duplicate z points
//		label sz = points.size();
//		points.setSize(2*sz);
//		for (label i = 0; i < sz; i++)
//		{
//			const point& pt = points[i];
//			points[i+sz] = point(pt.x(), pt.y(), -pt.z());
//		}
//
//		os  << points;
//	#};
//};

vertices
(
	( 0.05       0.        -0.2)
	( 0.1        0.        -0.2)
	( 0.2        0.        -0.2)
	( 0.2        0.0707107 -0.2)
	( 0.0707107  0.0707107 -0.2)
	( 0.0353553  0.0353553 -0.2)
	( 0.2        0.2       -0.2)
	( 0.0707107  0.2       -0.2)
	( 0.         0.2       -0.2)
	( 0.         0.1       -0.2)
	( 0.         0.05      -0.2)
	(-0.05       0.        -0.2)
	(-0.1        0.        -0.2)
	(-0.2        0.        -0.2)
	(-0.2        0.0707107 -0.2)
	(-0.0707107  0.0707107 -0.2)
	(-0.0353553  0.0353553 -0.2)
	(-0.2        0.2       -0.2)
	(-0.0707107  0.2       -0.2)
	( 0.2       -0.0707107 -0.2)
	( 0.0707107 -0.0707107 -0.2)
	( 0.0353553 -0.0353553 -0.2)
	( 0.2       -0.2       -0.2)
	( 0.0707107 -0.2       -0.2)
	( 0.        -0.2       -0.2)
	( 0.        -0.1       -0.2)
	( 0.        -0.05      -0.2)
	(-0.2       -0.0707107 -0.2)
	(-0.0707107 -0.0707107 -0.2)
	(-0.0353553 -0.0353553 -0.2)
	(-0.2       -0.2       -0.2)
	(-0.0707107 -0.2       -0.2)
	( 0.05       0.         0.2)
	( 0.1        0.         0.2)
	( 0.2        0.         0.2)
	( 0.2        0.0707107  0.2)
	( 0.0707107  0.0707107  0.2)
	( 0.0353553  0.0353553  0.2)
	( 0.2        0.2        0.2)
	( 0.0707107  0.2        0.2)
	( 0.         0.2        0.2)
	( 0.         0.1        0.2)
	( 0.         0.05       0.2)
	(-0.05       0.         0.2)
	(-0.1        0.         0.2)
	(-0.2        0.         0.2)
	(-0.2        0.0707107  0.2)
	(-0.0707107  0.0707107  0.2)
	(-0.0353553  0.0353553  0.2)
	(-0.2        0.2        0.2)
	(-0.0707107  0.2        0.2)
	( 0.2       -0.0707107  0.2)
	( 0.0707107 -0.0707107  0.2)
	( 0.0353553 -0.0353553  0.2)
	( 0.2       -0.2        0.2)
	( 0.0707107 -0.2        0.2)
	( 0.        -0.2        0.2)
	( 0.        -0.1        0.2)
	( 0.        -0.05       0.2)
	(-0.2       -0.0707107  0.2)
	(-0.0707107 -0.0707107  0.2)
	(-0.0353553 -0.0353553  0.2)
	(-0.2       -0.2        0.2)
	(-0.0707107 -0.2        0.2)
);


blocks
(
	hex (5 4 9 10 37 36 41 42) (10 10 60) simpleGrading (1 1 1)		//0
	hex (0 1 4 5 32 33 36 37) (10 10 60) simpleGrading (1 1 1)		//1
	hex (1 2 3 4 33 34 35 36) (20 10 60) simpleGrading (1 1 1)		//2
	hex (4 3 6 7 36 35 38 39) (20 20 60) simpleGrading (1 1 1)		//3
	hex (9 4 7 8 41 36 39 40) (10 20 60) simpleGrading (1 1 1)		//4
	hex (15 16 10 9 47 48 42 41) (10 10 60) simpleGrading (1 1 1)	//5
	hex (12 11 16 15 44 43 48 47) (10 10 60) simpleGrading (1 1 1)	//6
	hex (13 12 15 14 45 44 47 46) (20 10 60) simpleGrading (1 1 1)	//7
	hex (14 15 18 17 46 47 50 49) (20 20 60) simpleGrading (1 1 1)	//8
	hex (15 9 8 18 47 41 40 50) (10 20 60) simpleGrading (1 1 1)	//9
	hex (25 20 21 26 57 52 53 58) (10 10 60) simpleGrading (1 1 1)	//10
	hex (21 20 1 0 53 52 33 32) (10 10 60) simpleGrading (1 1 1)	//11
	hex (20 19 2 1 52 51 34 33) (20 10 60) simpleGrading (1 1 1)	//12
	hex (20 23 22 19 52 55 54 51) (20 20 60) simpleGrading (1 1 1)	//13
	hex (24 23 20 25 56 55 52 57) (10 20 60) simpleGrading (1 1 1)	//14
	hex (28 25 26 29 60 57 58 61) (10 10 60) simpleGrading (1 1 1)	//15
	hex (12 28 29 11 44 60 61 43) (10 10 60) simpleGrading (1 1 1)	//16
	hex (27 28 12 13 59 60 44 45) (20 10 60) simpleGrading (1 1 1)	//17
	hex (27 30 31 28 59 62 63 60) (20 20 60) simpleGrading (1 1 1)	//18
	hex (31 24 25 28 63 56 57 60) (10 20 60) simpleGrading (1 1 1)	//19
);

edges
(
	arc 0 5   ( 0.0469846  0.017101  -0.2)
	arc 5 10  ( 0.017101   0.0469846 -0.2)
	arc 1 4   ( 0.0939693  0.034202  -0.2)
	arc 4 9   ( 0.034202   0.0939693 -0.2)
	arc 32 37 ( 0.0469846  0.017101   0.2)
	arc 37 42 ( 0.017101   0.0469846  0.2)
	arc 33 36 ( 0.0939693  0.034202   0.2)
	arc 36 41 ( 0.034202   0.0939693  0.2)
	arc 11 16 (-0.0469846  0.017101  -0.2)
	arc 16 10 (-0.017101   0.0469846 -0.2)
	arc 12 15 (-0.0939693  0.034202  -0.2)
	arc 15 9  (-0.034202   0.0939693 -0.2)
	arc 43 48 (-0.0469846  0.017101   0.2)
	arc 48 42 (-0.017101   0.0469846  0.2)
	arc 44 47 (-0.0939693  0.034202   0.2)
	arc 47 41 (-0.034202   0.0939693  0.2)
	arc 0 21  ( 0.0469846 -0.017101  -0.2)
	arc 21 26 ( 0.017101  -0.0469846 -0.2)
	arc 1 20  ( 0.0939693 -0.034202  -0.2)
	arc 20 25 ( 0.034202  -0.0939693 -0.2)
	arc 32 53 ( 0.0469846 -0.017101   0.2)
	arc 53 58 ( 0.017101  -0.0469846  0.2)
	arc 33 52 ( 0.0939693 -0.034202   0.2)
	arc 52 57 ( 0.034202  -0.0939693  0.2)
	arc 11 29 (-0.0469846 -0.017101  -0.2)
	arc 29 26 (-0.017101  -0.0469846 -0.2)
	arc 12 28 (-0.0939693 -0.034202  -0.2)
	arc 28 25 (-0.034202  -0.0939693 -0.2)
	arc 43 61 (-0.0469846 -0.017101   0.2)
	arc 61 58 (-0.017101  -0.0469846  0.2)
	arc 44 60 (-0.0939693 -0.034202   0.2)
	arc 60 57 (-0.034202  -0.0939693  0.2)
);

boundary
(
	outlet
	{
		type cyclic;
		//type cyclicAMI;
		neighbourPatch inlet;
		//transform translational;
		//separationVector (-0.2 0 0);
		faces
		(
			(2 3 35 34)
			(3 6 38 35)
			(19 2 34 51)
			(22 19 51 54)
		);
	}
	wall
	{
		type wall;
		faces
		(
			(7 8 40 39)
			(6 7 39 38)
			(8 18 50 40)
			(18 17 49 50)
			(23 22 54 55)
			(24 23 55 56)
			(31 24 56 63)
			(30 31 63 62)
			(10 9 4 5)//back
			(5 4 1 0)
			(4 3 2 1)
			(7 6 3 4)
			(8 7 4 9)
			(15 9 10 16)
			(12 15 16 11)
			(13 14 15 12)
			(14 17 18 15)
			(15 18 8 9)
			(25 26 21 20)
			(20 21 0 1)
			(20 1 2 19)
			(23 20 19 22)
			(24 25 20 23)
			(28 29 26 25)
			(28 12 11 29)
			(27 13 12 28)
			(30 27 28 31)
			(31 28 25 24)
			(37 36 41 42)//front
			(33 36 37 32)
			(34 35 36 33)
			(35 38 39 36)
			(36 39 40 41)
			(42 41 47 48)
			(43 48 47 44)
			(44 47 46 45)
			(47 50 49 46)
			(41 40 50 47)
			(52 53 58 57)
			(52 33 32 53)
			(51 34 33 52)
			(54 51 52 55)
			(55 52 57 56)
			(57 58 61 60)
			(61 43 44 60)
			(60 44 45 59)
			(63 60 59 62)
			(56 57 60 63)
			(5 0 32 37)//cylinder
			(10 5 37 42)
			(16 10 42 48)
			(11 16 48 43)
			(29 11 43 61)
			(26 29 61 58)
			(21 26 58 53)
			(0 21 53 32)
		);
	}
	inlet
	{
		type cyclic;
		//type cyclicAMI;
		neighbourPatch outlet;
		//transform translational;
		//separationVector (0.2 0 0);
		faces
		(
			(14 13 45 46)
			(17 14 46 49)
			(13 27 59 45)
			(27 30 62 59)
		);
	}
);

mergePatchPairs
(
);

// ************************************************************************* //
